---
description: 
globs: 
alwaysApply: true
---
# Aerotage Time Reporting App - Frontend Development Rules

## 🏗️ Project Context
Electron desktop app with React/TypeScript frontend connecting to AWS serverless backend (separate repository).

**Stack**: Electron + React 18 + TypeScript + Tailwind CSS + React Context API

## 🚫 Critical Prohibitions

### Dependency Management ⚠️ CRITICAL
- **NEVER install alpha, beta, RC, or pre-release dependencies**
- **ALWAYS run `npm run check-deps` before dependency changes**
- **ALWAYS use stable versions with caret ranges (^1.2.3)**
- **NEVER add AWS CDK or infrastructure code to this repository**

### Code Standards
- **NEVER use deprecated React patterns (class components)**
- **NEVER ignore TypeScript errors or use 'any' type**
- **NEVER store sensitive data in localStorage**
- **NEVER create .js files - TypeScript only**
  - ⚠️ **EXCEPTION**: Critical Electron infrastructure files are allowed to remain as JavaScript:
    - `src/main/main.js` (Electron main process entry point)
    - `src/preload/preload.js` (Electron preload security bridge)
  - **Reason**: These files are core Electron infrastructure that require careful migration planning
  - **Future**: Plan dedicated TypeScript conversion as separate enhancement project

## ✅ Required Patterns

### React Context State Management
```typescript
// ALWAYS use useAppContext() hook
const { state, dispatch } = useAppContext();

// ALWAYS dispatch typed actions
dispatch({ type: 'ADD_TIME_ENTRY', payload: timeEntry });

// NEVER mutate state directly
```

### Component Structure
```typescript
// ALWAYS define props interface
interface ComponentProps {
  title: string;
  onSave: (data: FormData) => void;
}

// ALWAYS use functional components
export const Component: React.FC<ComponentProps> = ({ title, onSave }) => {
  // Component logic
};
```

### API Integration
```typescript
// ALWAYS use centralized API client
import { apiClient } from '@/services/api-client';

// ALWAYS handle errors properly
try {
  const result = await apiClient.createTimeEntry(data);
  dispatch({ type: 'ADD_TIME_ENTRY', payload: result });
} catch (error) {
  console.error('API Error:', error);
  // Handle error appropriately
}
```

## 📁 File Structure Rules
```
src/renderer/
├── components/          # Reusable UI components
├── pages/              # Main application pages  
├── context/            # React Context (AppContext.tsx)
├── services/           # API client services
├── config/             # AWS and API configuration
├── utils/              # Utility functions
└── types/              # TypeScript definitions
```

## 🎯 Development Guidelines

### Code Quality
- Use strict TypeScript with proper type definitions
- Follow functional programming patterns
- Use Tailwind CSS classes, avoid inline styles
- Implement proper error boundaries
- Include accessibility (ARIA labels, semantic HTML)

### State Management
- Use React Context with useReducer for global state
- Keep local state minimal (useState for component-specific only)
- Always wrap components needing global state with AppProvider
- Use typed actions for all state updates

### API & Backend Integration
- Backend API documentation: https://djfreip4iwrq0.cloudfront.net/
- Current API base URL: `https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/`
- Use AWS Amplify for authentication
- Always validate API responses
- Implement proper loading states

### Performance
- Use React.memo for expensive components
- Implement lazy loading for routes
- Optimize Context usage to prevent unnecessary re-renders
- Clean up event listeners and timers

## 🧪 Testing Requirements
- Write tests for all utility functions
- Test component rendering and Context interactions
- Mock Context provider in tests
- Use Jest and React Testing Library
- Achieve minimum 80% code coverage

## 📋 Current Phase: Project Management (Phase 3)
Focus on client/project CRUD operations and team management features.

## 🔗 Repository Architecture
- **Frontend** (this repo): Electron app with React/TypeScript
- **Backend** (separate repo): AWS serverless infrastructure
- **Coordination**: Update AWS config when backend endpoints change

## 🚫 Acceptable Exceptions

### Electron Infrastructure Files
```javascript
// ✅ ALLOWED: Critical Electron files (main.js, preload.js)
// These are core infrastructure requiring careful migration planning
const { app, BrowserWindow } = require('electron');  // main.js
const { contextBridge, ipcRenderer } = require('electron');  // preload.js
```

### Error Boundary Components
```typescript
// ⚠️ TEMPORARY: Error boundaries require class components until React 18+ alternatives
class ErrorBoundary extends Component<Props, State> {
  // Error boundary logic - plan migration to react-error-boundary library
}
```

## Examples

### ✅ Correct Context Usage
```typescript
const { state, dispatch } = useAppContext();
const { timeEntries, projects, timer } = state;

const handleStartTimer = (projectId: string, description: string) => {
  dispatch({ 
    type: 'START_TIMER', 
    payload: { projectId, description } 
  });
};
```

### ❌ Incorrect Patterns
```typescript
// DON'T: Direct state mutation
state.timeEntries.push(newEntry);

// DON'T: Using any type
const data: any = response.data;

// DON'T: Inline styles
<div style={{ color: 'red' }}>Error</div>

// DON'T: Class components (except Error Boundaries)
class MyComponent extends React.Component {}

// DON'T: JavaScript files in application code
// ❌ src/renderer/components/MyComponent.js
// ✅ src/renderer/components/MyComponent.tsx
```

Remember: This is a professional business application requiring production-quality code with reliability, security, and user-friendliness as top priorities.

