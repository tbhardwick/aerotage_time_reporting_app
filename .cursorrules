# Aerotage Time Reporting App - Frontend Development Rules

## 🏗️ Project Context
Electron desktop app with React/TypeScript frontend connecting to AWS serverless backend (separate repository).

**Stack**: Electron + React 18 + TypeScript + Tailwind CSS + React Context API

## 🚫 Critical Prohibitions

### Dependency Management ⚠️ CRITICAL
- **NEVER install alpha, beta, RC, or pre-release dependencies**
- **ALWAYS run `npm run check-deps` before dependency changes**
- **ALWAYS use stable versions with caret ranges (^1.2.3)**
- **NEVER add AWS CDK or infrastructure code to this repository**

### Code Standards
- **NEVER use deprecated React patterns (class components)**
- **NEVER ignore TypeScript errors or use 'any' type**
- **NEVER store sensitive data in localStorage**
- **NEVER create .js files - TypeScript only**
  - ⚠️ **EXCEPTION**: Critical Electron infrastructure files (`src/main/main.js`, `src/preload/preload.js`)

### Styling Standards ⚠️ CRITICAL - COMPLETED IMPLEMENTATION
- **NEVER use hardcoded colors** - All components now use theme-aware CSS variables
- **ALWAYS use hybrid approach**: Tailwind for layout + CSS variables for theme colors
- **ALWAYS test components** in both light and dark modes
- **Theme variables defined in**: `public/styles/main.css`

## ✅ Required Patterns

### React Context State Management
```typescript
const { state, dispatch } = useAppContext();
dispatch({ type: 'ADD_TIME_ENTRY', payload: timeEntry });
```

### Component Structure
```typescript
interface ComponentProps {
  title: string;
  onSave: (data: FormData) => void;
}

export const Component: React.FC<ComponentProps> = ({ title, onSave }) => {
  // Component logic
};
```

### Styling Patterns - THEME-AWARE (COMPLETED)
```typescript
// ✅ CORRECT: Hybrid approach - Tailwind layout + CSS vars for colors
<div 
  className="p-6 rounded-lg border"
  style={{
    backgroundColor: 'var(--surface-color)',
    borderColor: 'var(--border-color)',
    color: 'var(--text-primary)'
  }}
>
  Theme-aware content
</div>

// ✅ CORRECT: Theme-aware buttons
<button 
  className="px-4 py-2 rounded-lg font-medium transition-colors"
  style={{
    backgroundColor: 'var(--color-primary-600)',
    color: 'var(--color-text-on-primary)'
  }}
  onMouseEnter={(e) => {
    e.currentTarget.style.backgroundColor = 'var(--color-primary-hover)';
  }}
>
  Save Changes
</button>

// ❌ WRONG: Hardcoded colors (theme-blind)
<div className="bg-white text-gray-900">Ignores dark mode</div>
<div style={{ color: '#1d1d1f' }}>Hardcoded, ignores theme</div>
```

## 📁 File Structure Rules

### Application Code Structure
```
src/renderer/
├── components/          # Reusable UI components
├── pages/              # Main application pages  
├── context/            # React Context (AppContext.tsx)
├── services/           # API client services
├── config/             # AWS and API configuration
├── utils/              # Utility functions
└── types/              # TypeScript definitions
```

### Documentation Organization ⚠️ CRITICAL
- **NEVER create .md files in root directory** (except README.md)
- **ALWAYS place documentation in `/docs` folder**

```
docs/
├── README.md                    # Documentation index
├── [FEATURE_NAME].md           # Core feature documentation
├── api-integration/            # API specs and backend coordination
├── implementation-guides/      # Step-by-step development guides
├── troubleshooting/           # Debugging and issue resolution
└── archive/                   # Completed work and resolved issues
```

## 🎯 Development Guidelines

### Code Quality
- Use strict TypeScript with proper type definitions
- Follow functional programming patterns
- Implement proper error boundaries
- Include accessibility (ARIA labels, semantic HTML)

### Styling Guidelines ⚠️ CRITICAL - COMPLETED SYSTEM
- **Primary Approach**: Hybrid - Tailwind for layout + CSS variables for theme-aware colors
- **Theme System**: Comprehensive light/dark mode with CSS variables in `public/styles/main.css`
- **Color System**: Use theme CSS variables (`var(--text-primary)`, `var(--surface-color)`, `var(--color-primary-600)`)
- **Layout & Spacing**: Use Tailwind classes (`p-4`, `m-6`, `grid`, `flex`, `space-y-4`)
- **Responsive**: Use Tailwind breakpoints (`sm:`, `md:`, `lg:`, `xl:`)
- **Status**: ✅ **COMPLETE** - 20+ components migrated, 80% CSS reduction achieved

### State Management
- Use React Context with useReducer for global state
- Keep local state minimal (useState for component-specific only)
- Always wrap components needing global state with AppProvider
- Use typed actions for all state updates

### API & Backend Integration
- Backend API documentation: https://djfreip4iwrq0.cloudfront.net/
- Current API base URL: `https://k60bobrd9h.execute-api.us-east-1.amazonaws.com/dev/`
- Use AWS Amplify for authentication
- Always validate API responses
- Implement proper loading states

### Performance
- Use React.memo for expensive components
- Implement lazy loading for routes
- Optimize Context usage to prevent unnecessary re-renders
- Clean up event listeners and timers

## 🧪 Testing Requirements
- Write tests for all utility functions
- Test component rendering and Context interactions
- Mock Context provider in tests
- Use Jest and React Testing Library
- Achieve minimum 80% code coverage

## 📋 Current Phase: Project Management (Phase 3)
Focus on client/project CRUD operations and team management features.

## 🔗 Repository Architecture
- **Frontend** (this repo): Electron app with React/TypeScript
- **Backend** (separate repo): AWS serverless infrastructure
- **Coordination**: Update AWS config when backend endpoints change

## Examples

### ✅ Correct Theme-Aware Styling Patterns
```typescript
// ✅ CORRECT: Theme-aware hybrid approach
<div 
  className="p-6 rounded-xl shadow-soft"
  style={{
    backgroundColor: 'var(--surface-color)',
    borderColor: 'var(--border-color)'
  }}
>
  <h3 
    className="text-lg font-semibold mb-4"
    style={{ color: 'var(--text-primary)' }}
  >
    Theme-aware title
  </h3>
  <p style={{ color: 'var(--text-secondary)' }}>
    Content that adapts to light/dark mode
  </p>
</div>

// ✅ CORRECT: Responsive layout with theme colors
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  <div 
    className="rounded-xl p-6"
    style={{ backgroundColor: 'var(--surface-color)' }}
  >
    Responsive + theme-aware
  </div>
</div>
```

### ❌ Incorrect Patterns
```typescript
// DON'T: Hardcoded colors that ignore theme system
<div className="bg-white text-gray-900">Ignores dark mode</div>
<div style={{ color: '#1d1d1f' }}>Hardcoded, ignores theme</div>

// DON'T: Using Tailwind color classes (theme-blind)
<div className="bg-blue-600 text-white">Ignores theme system</div>

// DON'T: Class components (except Error Boundaries)
class MyComponent extends React.Component {}

// DON'T: JavaScript files in application code
// ❌ src/renderer/components/MyComponent.js
// ✅ src/renderer/components/MyComponent.tsx
```

Remember: This is a professional business application requiring production-quality code with reliability, security, user-friendliness, and **consistent styling** as top priorities. The styling consistency implementation is **COMPLETE** with 20+ components migrated to theme-aware patterns. 